"use strict";
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
var weather_data_1 = require("../weather.data");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var WeatherService = (function () {
    function WeatherService(_http) {
        this._http = _http;
    }
    WeatherService.prototype.getWeatherItems = function () {
        return weather_data_1.WEATHER_ITEMS;
    };
    WeatherService.prototype.getHourlyWeatherItems = function () {
        return weather_data_1.WEATHER_ITEMS_HOURLY;
    };
    WeatherService.prototype.getGEOWeatherItems = function () {
        return weather_data_1.WEATHER_ITEMS_GEO;
    };
    WeatherService.prototype.addWeatherItem = function (weatherItem) {
        weather_data_1.WEATHER_ITEMS.push(weatherItem);
    };
    WeatherService.prototype.addHourlyWeatherItem = function (weatherItemForFewDay) {
        weather_data_1.WEATHER_ITEMS_HOURLY.push(weatherItemForFewDay);
    };
    WeatherService.prototype.addWeatherItemByGEO = function (weatherItemGEO) {
        weather_data_1.WEATHER_ITEMS_GEO.push(weatherItemGEO);
    };
    WeatherService.prototype.clearWeatherItems = function () {
        weather_data_1.WEATHER_ITEMS.splice(0);
    };
    WeatherService.prototype.clearHourlyWeatherItems = function () {
        weather_data_1.WEATHER_ITEMS_HOURLY.splice(0);
    };
    WeatherService.prototype.searchWeatherData = function (cityName) {
        return this._http.get('https://api.apixu.com/v1/current.json?key=968c7a3b6b0d4ca08fc95022172102&q=' + cityName)
            .map(function (response) { return response.json(); })
            .catch(function (error) {
            console.error(error);
            return Rx_1.Observable.throw(error.json());
        });
    };
    WeatherService.prototype.searchWeatherDataForFewDays = function (cityName, days) {
        return this._http.get('https://api.apixu.com/v1/forecast.json?key=968c7a3b6b0d4ca08fc95022172102&q=' + cityName + '&days=' + days)
            .map(function (response) { return response.json(); })
            .catch(function (error) {
            console.error(error);
            return Rx_1.Observable.throw(error.json());
        });
    };
    WeatherService.prototype.searchCityByGEOCoords = function (lat, lon) {
        return this._http.get('https://api.apixu.com/v1/search.json?key=968c7a3b6b0d4ca08fc95022172102&q=' + lat + ' ' + lon)
            .map(function (response) { return response.json(); })
            .catch(function (error) {
            console.error(error);
            return Rx_1.Observable.throw(error.json());
        });
    };
    return WeatherService;
}());
WeatherService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], WeatherService);
exports.WeatherService = WeatherService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VhdGhlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VhdGhlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBdUY7QUFDdkYsc0NBQXVGO0FBQ3ZGLDhCQUFpRjtBQUNqRixnREFBeUY7QUFJekYsZ0NBQThCO0FBQzlCLGlDQUErQjtBQUcvQixJQUFhLGNBQWM7SUFDdkIsd0JBQXFCLEtBQVc7UUFBWCxVQUFLLEdBQUwsS0FBSyxDQUFNO0lBQUcsQ0FBQztJQUVwQyx3Q0FBZSxHQUFmO1FBQ0ksTUFBTSxDQUFDLDRCQUFhLENBQUM7SUFDekIsQ0FBQztJQUVELDhDQUFxQixHQUFyQjtRQUNJLE1BQU0sQ0FBQyxtQ0FBb0IsQ0FBQztJQUNoQyxDQUFDO0lBRUQsMkNBQWtCLEdBQWxCO1FBQ0ksTUFBTSxDQUFDLGdDQUFpQixDQUFDO0lBQzdCLENBQUM7SUFFRCx1Q0FBYyxHQUFkLFVBQWUsV0FBd0I7UUFDbkMsNEJBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELDZDQUFvQixHQUFwQixVQUFxQixvQkFBMkM7UUFDNUQsbUNBQW9CLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELDRDQUFtQixHQUFuQixVQUFvQixjQUE4QjtRQUM5QyxnQ0FBaUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELDBDQUFpQixHQUFqQjtRQUNJLDRCQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxnREFBdUIsR0FBdkI7UUFDSSxtQ0FBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELDBDQUFpQixHQUFqQixVQUFrQixRQUFnQjtRQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsNkVBQTZFLEdBQUcsUUFBUSxDQUFDO2FBQzFHLEdBQUcsQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBZixDQUFlLENBQUM7YUFDaEMsS0FBSyxDQUFDLFVBQUEsS0FBSztZQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckIsTUFBTSxDQUFDLGVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsb0RBQTJCLEdBQTNCLFVBQTRCLFFBQWdCLEVBQUUsSUFBWTtRQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsOEVBQThFLEdBQUcsUUFBUSxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUM7YUFDN0gsR0FBRyxDQUFDLFVBQUEsUUFBUSxJQUFJLE9BQUEsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFmLENBQWUsQ0FBQzthQUNoQyxLQUFLLENBQUMsVUFBQSxLQUFLO1lBQ1IsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQixNQUFNLENBQUMsZUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFRCw4Q0FBcUIsR0FBckIsVUFBc0IsR0FBVyxFQUFFLEdBQVc7UUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLDRFQUE0RSxHQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFDO2FBQzFHLEdBQUcsQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBZixDQUFlLENBQUM7YUFDaEMsS0FBSyxDQUFDLFVBQUEsS0FBSztZQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckIsTUFBTSxDQUFDLGVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUFDLEFBN0RELElBNkRDO0FBN0RZLGNBQWM7SUFEMUIsaUJBQVUsRUFBRTtxQ0FFbUIsV0FBSTtHQUR2QixjQUFjLENBNkQxQjtBQTdEWSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICdAYW5ndWxhci9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBcInJ4anMvUnhcIjtcclxuaW1wb3J0IHsgV0VBVEhFUl9JVEVNUywgV0VBVEhFUl9JVEVNU19IT1VSTFksIFdFQVRIRVJfSVRFTVNfR0VPIH0gZnJvbSBcIi4uL3dlYXRoZXIuZGF0YVwiO1xyXG5pbXBvcnQgeyBXZWF0aGVySXRlbSB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIFwiLi4vaW50ZXJmYWNlcy93ZWF0aGVyLWl0ZW0uaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IFdlYXRoZXJJdGVtRm9yRmV3RGF5cyB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gXCIuLi9pbnRlcmZhY2VzL3dlYXRoZXItaXRlbS1mb3ItZmV3LWRheXMuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IFdlYXRoZXJJdGVtR0VPIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gJy4uL2ludGVyZmFjZXMvd2VhdGhlci1pdGVtLWdlby5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgXCJyeGpzL2FkZC9vcGVyYXRvci9kb1wiO1xyXG5pbXBvcnQgXCJyeGpzL2FkZC9vcGVyYXRvci9tYXBcIjtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFdlYXRoZXJTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yIChwcml2YXRlIF9odHRwOiBIdHRwKSB7fVxyXG5cclxuICAgIGdldFdlYXRoZXJJdGVtcygpIHtcclxuICAgICAgICByZXR1cm4gV0VBVEhFUl9JVEVNUztcclxuICAgIH1cclxuXHJcbiAgICBnZXRIb3VybHlXZWF0aGVySXRlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFdFQVRIRVJfSVRFTVNfSE9VUkxZO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEdFT1dlYXRoZXJJdGVtcygpIHtcclxuICAgICAgICByZXR1cm4gV0VBVEhFUl9JVEVNU19HRU87XHJcbiAgICB9XHJcblxyXG4gICAgYWRkV2VhdGhlckl0ZW0od2VhdGhlckl0ZW06IFdlYXRoZXJJdGVtKSB7XHJcbiAgICAgICAgV0VBVEhFUl9JVEVNUy5wdXNoKHdlYXRoZXJJdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRIb3VybHlXZWF0aGVySXRlbSh3ZWF0aGVySXRlbUZvckZld0RheTogV2VhdGhlckl0ZW1Gb3JGZXdEYXlzKSB7XHJcbiAgICAgICAgV0VBVEhFUl9JVEVNU19IT1VSTFkucHVzaCh3ZWF0aGVySXRlbUZvckZld0RheSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkV2VhdGhlckl0ZW1CeUdFTyh3ZWF0aGVySXRlbUdFTzogV2VhdGhlckl0ZW1HRU8pIHtcclxuICAgICAgICBXRUFUSEVSX0lURU1TX0dFTy5wdXNoKHdlYXRoZXJJdGVtR0VPKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcldlYXRoZXJJdGVtcygpIHtcclxuICAgICAgICBXRUFUSEVSX0lURU1TLnNwbGljZSgwKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhckhvdXJseVdlYXRoZXJJdGVtcygpIHtcclxuICAgICAgICBXRUFUSEVSX0lURU1TX0hPVVJMWS5zcGxpY2UoMCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VhcmNoV2VhdGhlckRhdGEoY2l0eU5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KCdodHRwczovL2FwaS5hcGl4dS5jb20vdjEvY3VycmVudC5qc29uP2tleT05NjhjN2EzYjZiMGQ0Y2EwOGZjOTUwMjIxNzIxMDImcT0nICsgY2l0eU5hbWUpXHJcbiAgICAgICAgICAgIC5tYXAocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvci5qc29uKCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZWFyY2hXZWF0aGVyRGF0YUZvckZld0RheXMoY2l0eU5hbWU6IHN0cmluZywgZGF5czogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQoJ2h0dHBzOi8vYXBpLmFwaXh1LmNvbS92MS9mb3JlY2FzdC5qc29uP2tleT05NjhjN2EzYjZiMGQ0Y2EwOGZjOTUwMjIxNzIxMDImcT0nICsgY2l0eU5hbWUgKyAnJmRheXM9JyArIGRheXMpXHJcbiAgICAgICAgICAgIC5tYXAocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvci5qc29uKCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZWFyY2hDaXR5QnlHRU9Db29yZHMobGF0OiBudW1iZXIsIGxvbjogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQoJ2h0dHBzOi8vYXBpLmFwaXh1LmNvbS92MS9zZWFyY2guanNvbj9rZXk9OTY4YzdhM2I2YjBkNGNhMDhmYzk1MDIyMTcyMTAyJnE9JytsYXQrJyAnK2xvbilcclxuICAgICAgICAgICAgLm1hcChyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yLmpzb24oKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==