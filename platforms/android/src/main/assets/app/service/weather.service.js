"use strict";
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
var weather_data_1 = require("../weather.data");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var WeatherService = (function () {
    function WeatherService(_http) {
        this._http = _http;
    }
    WeatherService.prototype.getWeatherItems = function () {
        return weather_data_1.WEATHER_ITEMS;
    };
    WeatherService.prototype.getHourlyWeatherItems = function () {
        return weather_data_1.WEATHER_ITEMS_HOURLY;
    };
    WeatherService.prototype.getGEOWeatherItems = function () {
        return weather_data_1.WEATHER_ITEMS_GEO;
    };
    WeatherService.prototype.addWeatherItem = function (weatherItem) {
        weather_data_1.WEATHER_ITEMS.push(weatherItem);
    };
    WeatherService.prototype.addHourlyWeatherItem = function (weatherItemForFewDay) {
        weather_data_1.WEATHER_ITEMS_HOURLY.push(weatherItemForFewDay);
    };
    WeatherService.prototype.addWeatherItemByGEO = function (weatherItemGEO) {
        weather_data_1.WEATHER_ITEMS_GEO.push(weatherItemGEO);
    };
    WeatherService.prototype.clearWeatherItems = function () {
        weather_data_1.WEATHER_ITEMS.splice(0);
    };
    WeatherService.prototype.clearHourlyWeatherItems = function () {
        weather_data_1.WEATHER_ITEMS_HOURLY.splice(0);
    };
    WeatherService.prototype.searchWeatherData = function (cityName) {
        return this._http.get('https://api.apixu.com/v1/current.json?key=968c7a3b6b0d4ca08fc95022172102&q=' + cityName)
            .map(function (response) { return response.json(); })
            .catch(function (error) {
            console.error(error);
            return Rx_1.Observable.throw(error.json());
        });
    };
    WeatherService.prototype.searchWeatherDataForFewDays = function (cityName, days) {
        return this._http.get('https://api.apixu.com/v1/forecast.json?key=968c7a3b6b0d4ca08fc95022172102&q=' + cityName + '&days=' + days)
            .map(function (response) { return response.json(); })
            .catch(function (error) {
            console.error(error);
            return Rx_1.Observable.throw(error.json());
        });
    };
    WeatherService.prototype.searchCityByGEOCoords = function (lat, lon) {
        return this._http.get('https://api.apixu.com/v1/search.json?key=968c7a3b6b0d4ca08fc95022172102&q=' + lat + '%20' + lon)
            .map(function (response) { return response.json(); })
            .catch(function (error) {
            console.error(error);
            return Rx_1.Observable.throw(error.json());
        });
    };
    return WeatherService;
}());
WeatherService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], WeatherService);
exports.WeatherService = WeatherService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VhdGhlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VhdGhlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBdUY7QUFDdkYsc0NBQXVGO0FBQ3ZGLDhCQUFpRjtBQUNqRixnREFBeUY7QUFJekYsZ0NBQThCO0FBQzlCLGlDQUErQjtBQUkvQixJQUFhLGNBQWM7SUFDdkIsd0JBQXFCLEtBQVc7UUFBWCxVQUFLLEdBQUwsS0FBSyxDQUFNO0lBQUcsQ0FBQztJQUVwQyx3Q0FBZSxHQUFmO1FBQ0ksTUFBTSxDQUFDLDRCQUFhLENBQUM7SUFDekIsQ0FBQztJQUVELDhDQUFxQixHQUFyQjtRQUNJLE1BQU0sQ0FBQyxtQ0FBb0IsQ0FBQztJQUNoQyxDQUFDO0lBRUQsMkNBQWtCLEdBQWxCO1FBQ0ksTUFBTSxDQUFDLGdDQUFpQixDQUFDO0lBQzdCLENBQUM7SUFFRCx1Q0FBYyxHQUFkLFVBQWUsV0FBd0I7UUFDbkMsNEJBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELDZDQUFvQixHQUFwQixVQUFxQixvQkFBMkM7UUFDNUQsbUNBQW9CLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELDRDQUFtQixHQUFuQixVQUFvQixjQUE4QjtRQUM5QyxnQ0FBaUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELDBDQUFpQixHQUFqQjtRQUNJLDRCQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxnREFBdUIsR0FBdkI7UUFDSSxtQ0FBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELDBDQUFpQixHQUFqQixVQUFrQixRQUFnQjtRQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsNkVBQTZFLEdBQUcsUUFBUSxDQUFDO2FBQzFHLEdBQUcsQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBZixDQUFlLENBQUM7YUFDaEMsS0FBSyxDQUFDLFVBQUEsS0FBSztZQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckIsTUFBTSxDQUFDLGVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsb0RBQTJCLEdBQTNCLFVBQTRCLFFBQWdCLEVBQUUsSUFBWTtRQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsOEVBQThFLEdBQUcsUUFBUSxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUM7YUFDN0gsR0FBRyxDQUFDLFVBQUEsUUFBUSxJQUFJLE9BQUEsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFmLENBQWUsQ0FBQzthQUNoQyxLQUFLLENBQUMsVUFBQSxLQUFLO1lBQ1IsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQixNQUFNLENBQUMsZUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7SUFHRCw4Q0FBcUIsR0FBckIsVUFBc0IsR0FBVyxFQUFFLEdBQVc7UUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLDRFQUE0RSxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO2FBQ2xILEdBQUcsQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBZixDQUFlLENBQUM7YUFDaEMsS0FBSyxDQUFDLFVBQUEsS0FBSztZQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckIsTUFBTSxDQUFDLGVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUFDLEFBOURELElBOERDO0FBOURZLGNBQWM7SUFEMUIsaUJBQVUsRUFBRTtxQ0FFbUIsV0FBSTtHQUR2QixjQUFjLENBOEQxQjtBQTlEWSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICdAYW5ndWxhci9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBcInJ4anMvUnhcIjtcclxuaW1wb3J0IHsgV0VBVEhFUl9JVEVNUywgV0VBVEhFUl9JVEVNU19IT1VSTFksIFdFQVRIRVJfSVRFTVNfR0VPIH0gZnJvbSBcIi4uL3dlYXRoZXIuZGF0YVwiO1xyXG5pbXBvcnQgeyBXZWF0aGVySXRlbSB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIFwiLi4vaW50ZXJmYWNlcy93ZWF0aGVyLWl0ZW0uaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IFdlYXRoZXJJdGVtRm9yRmV3RGF5cyB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gXCIuLi9pbnRlcmZhY2VzL3dlYXRoZXItaXRlbS1mb3ItZmV3LWRheXMuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IFdlYXRoZXJJdGVtR0VPIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gJy4uL2ludGVyZmFjZXMvd2VhdGhlci1pdGVtLWdlby5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgXCJyeGpzL2FkZC9vcGVyYXRvci9kb1wiO1xyXG5pbXBvcnQgXCJyeGpzL2FkZC9vcGVyYXRvci9tYXBcIjtcclxuaW1wb3J0IHtDaXR5Rm91bmR9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2NpdHktZm91bmQuaW50ZXJmYWNlXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBXZWF0aGVyU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvciAocHJpdmF0ZSBfaHR0cDogSHR0cCkge31cclxuXHJcbiAgICBnZXRXZWF0aGVySXRlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFdFQVRIRVJfSVRFTVM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SG91cmx5V2VhdGhlckl0ZW1zKCkge1xyXG4gICAgICAgIHJldHVybiBXRUFUSEVSX0lURU1TX0hPVVJMWTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRHRU9XZWF0aGVySXRlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFdFQVRIRVJfSVRFTVNfR0VPO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFdlYXRoZXJJdGVtKHdlYXRoZXJJdGVtOiBXZWF0aGVySXRlbSkge1xyXG4gICAgICAgIFdFQVRIRVJfSVRFTVMucHVzaCh3ZWF0aGVySXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkSG91cmx5V2VhdGhlckl0ZW0od2VhdGhlckl0ZW1Gb3JGZXdEYXk6IFdlYXRoZXJJdGVtRm9yRmV3RGF5cykge1xyXG4gICAgICAgIFdFQVRIRVJfSVRFTVNfSE9VUkxZLnB1c2god2VhdGhlckl0ZW1Gb3JGZXdEYXkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFdlYXRoZXJJdGVtQnlHRU8od2VhdGhlckl0ZW1HRU86IFdlYXRoZXJJdGVtR0VPKSB7XHJcbiAgICAgICAgV0VBVEhFUl9JVEVNU19HRU8ucHVzaCh3ZWF0aGVySXRlbUdFTyk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJXZWF0aGVySXRlbXMoKSB7XHJcbiAgICAgICAgV0VBVEhFUl9JVEVNUy5zcGxpY2UoMCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJIb3VybHlXZWF0aGVySXRlbXMoKSB7XHJcbiAgICAgICAgV0VBVEhFUl9JVEVNU19IT1VSTFkuc3BsaWNlKDApO1xyXG4gICAgfVxyXG5cclxuICAgIHNlYXJjaFdlYXRoZXJEYXRhKGNpdHlOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9odHRwLmdldCgnaHR0cHM6Ly9hcGkuYXBpeHUuY29tL3YxL2N1cnJlbnQuanNvbj9rZXk9OTY4YzdhM2I2YjBkNGNhMDhmYzk1MDIyMTcyMTAyJnE9JyArIGNpdHlOYW1lKVxyXG4gICAgICAgICAgICAubWFwKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IuanNvbigpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VhcmNoV2VhdGhlckRhdGFGb3JGZXdEYXlzKGNpdHlOYW1lOiBzdHJpbmcsIGRheXM6IG51bWJlcik6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KCdodHRwczovL2FwaS5hcGl4dS5jb20vdjEvZm9yZWNhc3QuanNvbj9rZXk9OTY4YzdhM2I2YjBkNGNhMDhmYzk1MDIyMTcyMTAyJnE9JyArIGNpdHlOYW1lICsgJyZkYXlzPScgKyBkYXlzKVxyXG4gICAgICAgICAgICAubWFwKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IuanNvbigpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHNlYXJjaENpdHlCeUdFT0Nvb3JkcyhsYXQ6IG51bWJlciwgbG9uOiBudW1iZXIpOiBPYnNlcnZhYmxlPENpdHlGb3VuZFtdPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KCdodHRwczovL2FwaS5hcGl4dS5jb20vdjEvc2VhcmNoLmpzb24/a2V5PTk2OGM3YTNiNmIwZDRjYTA4ZmM5NTAyMjE3MjEwMiZxPScgKyBsYXQgKyAnJTIwJyArIGxvbilcclxuICAgICAgICAgICAgLm1hcChyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yLmpzb24oKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==